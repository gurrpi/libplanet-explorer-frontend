{"version":3,"sources":["webpack:///./src/subpages/list.tsx","webpack:///./src/misc/useSearchParams.ts","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx","webpack:///./src/components/Timestamp.tsx"],"names":["BlockList","_ref3","blocks","loading","columns","key","name","fieldName","iconName","isIconOnly","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","_ref4","hash","react_default","a","createElement","Link","href","_ref5","timestamp","Timestamp","block","index","beforeBlock","Math","min","length","beforeTimestamp","Date","parse","nowTimestamp","Fragment","_ref6","difficulty","_ref7","transactions","ShimmeredDetailsList","setKey","items","slice","selectionMode","SelectionMode","none","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","enableShimmer","onItemInvoked","navigate","IndexPage","_ref","location","_useSearchParams","_useQueryString","useQueryString","queryString","setQueryString","querystring","searchParams","stringify","useSearchParams","setSearchParams","_searchParams$offset","offset","setOffset","newSearchParams","Object","assign","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","Checkbox","label","checked","onChange","_","graphql","variables","limit","pollInterval","_ref2","error","timestamps","blockQuery","map","interval","i","difficulties","reduce","d","sum","txNumbers","totalTxNumber","b","className","Number","parseInt","toLocaleString","DefaultButton","onClick","disabled","css","_templateObject","list_BlockList","useMemo","search","substr","useCallback","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","_templateObject5","TransactionByIdDocument","_templateObject6","TransactionByIdComponent","TransactionsByAccountDocument","_templateObject7","TransactionsByAccountComponent","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","date","formatOptions","dateStyle","timeStyle","now","string","undefined","getFullYear","getMonth","getDate","toLocaleTimeString","dateTime","toISOString","title"],"mappings":"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","file":"component---src-subpages-list-tsx-5754c050bf23e39266a1.js","sourcesContent":["import React, { useState } from 'react';\nimport { css } from 'emotion';\nimport { navigate } from 'gatsby';\nimport { Checkbox, DefaultButton, Link } from 'office-ui-fabric-react';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport { ShimmeredDetailsList } from 'office-ui-fabric-react/lib/ShimmeredDetailsList';\nimport { Block, BlockListComponent } from '../generated/graphql';\nimport useSearchParams from '../misc/useSearchParams';\nimport Timestamp from '../components/Timestamp';\n\ninterface IndexPageProps {\n  location: Location;\n}\n\nconst POLL_INTERVAL = 2000;\n\nconst IndexPage: React.FC<IndexPageProps> = ({ location }) => {\n  const limit = 21;\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const { offset = 0 } = searchParams;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      const newSearchParams = { ...searchParams };\n      delete newSearchParams.offset;\n      setSearchParams(newSearchParams);\n    } else {\n      setSearchParams({ ...searchParams, offset });\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <div>\n      <Checkbox\n        label=\"Include blocks having any tx\"\n        checked={excludeEmptyTxs}\n        onChange={(_, checked) => {\n          setExcludeEmptyTxs(!!checked);\n        }}\n      />\n      <BlockListComponent\n        variables={{ offset, limit, excludeEmptyTxs }}\n        pollInterval={POLL_INTERVAL}>\n        {({ data, loading, error }) => {\n          if (error) return <p>error!</p>;\n\n          const timestamps: Date[] | null =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? data.blockQuery.blocks.map(block => new Date(block!.timestamp))\n              : null;\n\n          let interval: number | null = timestamps ? 0 : null;\n          if (interval != null && timestamps) {\n            for (let i = 0; i < timestamps.length - 1; i++) {\n              interval += +timestamps[i] - +timestamps[i + 1];\n            }\n            interval /= (timestamps.length - 1) * 1000;\n          }\n\n          const difficulties: number[] | null =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? data.blockQuery.blocks.map(block => block!.difficulty)\n              : null;\n          let difficulty = 0;\n          if (difficulty != null && difficulties) {\n            difficulty =\n              difficulties.reduce((d, sum) => d + sum, 0) / difficulties.length;\n          }\n\n          const txNumbers: number[] | null =\n            data && data.blockQuery && data.blockQuery.blocks\n              ? data.blockQuery.blocks.map(block => block!.transactions.length)\n              : null;\n          let totalTxNumber = 0;\n          if (difficulty != null && difficulties) {\n            totalTxNumber = txNumbers.reduce((a, b) => a + b, 0);\n          }\n          return (\n            <>\n              <div className=\"cards\">\n                <div className=\"card\" key=\"interval\">\n                  <strong>{interval}</strong> sec\n                  <p>Average interval in this page</p>\n                </div>\n                <div className=\"card\" key=\"difficulty\">\n                  <strong>\n                    {Number(parseInt(difficulty)).toLocaleString()}\n                  </strong>\n                  <p>Average difficulty in this page</p>\n                </div>\n                <div className=\"card\" key=\"total-tx-number\">\n                  <strong>{Number(totalTxNumber).toLocaleString()}</strong>\n                  <p>Total txs in this page</p>\n                </div>\n              </div>\n              <div className=\"nav\">\n                <DefaultButton\n                  onClick={newerHandler}\n                  disabled={loading || offset < 1}\n                  className={css`\n                    margin-right: 5px;\n                  `}>\n                  &larr; Newer\n                </DefaultButton>\n                <DefaultButton disabled={loading} onClick={olderHandler}>\n                  Older &rarr;\n                </DefaultButton>\n              </div>\n              <BlockList\n                blocks={\n                  loading\n                    ? []\n                    : (data!.blockQuery!.blocks as NonNullable<Block[]>)\n                }\n                loading={loading}\n              />\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </div>\n  );\n};\n\ninterface BlockListProps {\n  blocks: Pick<Block, 'hash' | 'index' | 'timestamp' | 'difficulty'>[];\n  loading: NonNullable<Boolean>;\n}\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks, loading }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'columnIndex',\n      name: 'Index',\n      fieldName: 'index',\n      iconName: 'NumberSymbol',\n      isIconOnly: true,\n      minWidth: 5,\n      maxWidth: 40,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n    {\n      key: 'columnHash',\n      name: 'Block Hash',\n      fieldName: 'hash',\n      minWidth: 5,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'string',\n      isPadded: true,\n      onRender: ({ hash }) => <Link href={`./block/?${hash}`}>{hash}</Link>,\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: ({ timestamp }) => <Timestamp timestamp={timestamp} />,\n    },\n    {\n      key: 'coulmnMiner',\n      name: 'Miner',\n      fieldName: 'miner',\n      minWidth: 123,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'columnTimeTaken',\n      name: 'Time Taken',\n      minWidth: 50,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: (block, index) => {\n        let beforeBlock = blocks[Math.min(index! + 1, blocks.length - 1)];\n        let beforeTimestamp = Date.parse(beforeBlock.timestamp);\n        let nowTimestamp = Date.parse(block.timestamp);\n        return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n      },\n    },\n    {\n      key: 'columnDifficulty',\n      name: 'Difficulty',\n      minWidth: 50,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: ({ difficulty }) => <>{difficulty}</>,\n    },\n    {\n      key: 'columnTxNumber',\n      name: 'Tx #',\n      minWidth: 5,\n      maxWidth: 20,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'number',\n      isPadded: true,\n      onRender: ({ transactions }) => <>{transactions.length}</>,\n    },\n  ];\n  return (\n    <ShimmeredDetailsList\n      setKey=\"set\"\n      items={loading ? [] : blocks.slice(0, -1)}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      enableShimmer={loading}\n      onItemInvoked={block => navigate(`/search/?${block.hash}`)}\n    />\n  );\n};\n\nexport default IndexPage;\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: any) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback(\n    (queryString: string) => {\n      const path = location.pathname.substr(withPrefix('/').length - 1);\n      navigate(path + (queryString ? `?${queryString}` : ''));\n    },\n    [location, navigate]\n  );\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n   __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n   __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n   __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n   __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>\n};\n\n\n\n\n\n\n\nexport type Query = {\n   __typename?: 'Query',\n  blockQuery?: Maybe<BlockQuery>,\n  transactionQuery?: Maybe<TransactionQuery>,\n};\n\n\nexport type Transaction = {\n   __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\n\nexport type TransactionQuery = {\n   __typename?: 'TransactionQuery',\n  transaction?: Maybe<Transaction>,\n  transactions: Array<Transaction>,\n};\n\n\nexport type TransactionQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionQueryTransactionsArgs = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'> & { actions: Array<({ __typename?: 'Action' } & { arguments: Array<({ __typename?: 'ActionArgumentType' } & Pick<ActionArgumentType, 'key' | 'value'>)> })> });\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> })> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'Query' } & { blockQuery: Maybe<({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> })> });\n\nexport type TransactionListQueryVariables = {\n  signer?: Maybe<Scalars['Address']>,\n  involvedAddress?: Maybe<Scalars['Address']>,\n  desc: Scalars['Boolean'],\n  offset: Scalars['Int'],\n  limit: Scalars['Int']\n};\n\n\nexport type TransactionListQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\n\nexport type TransactionsByAccountQueryVariables = {\n  involvedAddress?: Maybe<Scalars['Address']>\n};\n\n\nexport type TransactionsByAccountQuery = ({ __typename?: 'Query' } & { transactionQuery: Maybe<({ __typename?: 'TransactionQuery' } & { transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> })> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  actions {\n    arguments {\n      key\n      value\n    }\n  }\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n  blockQuery {\n    blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs) {\n      ...BlockCommon\n      miner\n      transactions {\n        id\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  blockQuery {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($signer: Address, $involvedAddress: Address, $desc: Boolean!, $offset: Int!, $limit: Int!) {\n  transactionQuery {\n    transactions(signer: $signer, involvedAddress: $involvedAddress, desc: $desc, offset: $offset, limit: $limit) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionListQuery, TransactionListQueryVariables>, 'query'> & ({ variables: TransactionListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TransactionListComponent = (props: TransactionListComponentProps) => (\n      <ApolloReactComponents.Query<TransactionListQuery, TransactionListQueryVariables> query={TransactionListDocument} {...props} />\n    );\n    \nexport type TransactionListProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionListQuery, TransactionListQueryVariables> & TChildProps;\nexport function withTransactionList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionListQuery,\n  TransactionListQueryVariables,\n  TransactionListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionListQuery, TransactionListQueryVariables, TransactionListProps<TChildProps>>(TransactionListDocument, {\n      alias: 'withTransactionList',\n      ...operationOptions\n    });\n};\nexport type TransactionListQueryResult = ApolloReactCommon.QueryResult<TransactionListQuery, TransactionListQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transactionQuery {\n    transaction(id: $id) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;\nexport const TransactionsByAccountDocument = gql`\n    query TransactionsByAccount($involvedAddress: Address) {\n  transactionQuery {\n    transactions(involvedAddress: $involvedAddress, desc: true) {\n      ...TransactionCommon\n    }\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionsByAccountComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>, 'query'>;\n\n    export const TransactionsByAccountComponent = (props: TransactionsByAccountComponentProps) => (\n      <ApolloReactComponents.Query<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> query={TransactionsByAccountDocument} {...props} />\n    );\n    \nexport type TransactionsByAccountProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionsByAccountQuery, TransactionsByAccountQueryVariables> & TChildProps;\nexport function withTransactionsByAccount<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionsByAccountQuery,\n  TransactionsByAccountQueryVariables,\n  TransactionsByAccountProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionsByAccountQuery, TransactionsByAccountQueryVariables, TransactionsByAccountProps<TChildProps>>(TransactionsByAccountDocument, {\n      alias: 'withTransactionsByAccount',\n      ...operationOptions\n    });\n};\nexport type TransactionsByAccountQueryResult = ApolloReactCommon.QueryResult<TransactionsByAccountQuery, TransactionsByAccountQueryVariables>;","import { Scalars } from '../generated/graphql';\nimport React from 'react';\n\ninterface TimestampProps {\n  timestamp: Scalars['DateTimeOffset'];\n}\nconst Timestamp: React.FC<TimestampProps> = ({ timestamp }) => {\n  const date = new Date(timestamp);\n  const formatOptions: any = {\n    dateStyle: 'short',\n    timeStyle: 'short',\n  };\n  const now = new Date();\n  let string = date.toLocaleString(undefined, formatOptions);\n  if (\n    now.getFullYear() == date.getFullYear() &&\n    now.getMonth() == date.getMonth() &&\n    now.getDate() == date.getDate()\n  ) {\n    string = date.toLocaleTimeString(undefined, formatOptions);\n  }\n  return (\n    <time dateTime={date.toISOString()} title={date.toLocaleString()}>\n      {string}\n    </time>\n  );\n};\n\nexport default Timestamp;\n"],"sourceRoot":""}